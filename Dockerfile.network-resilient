# Network-resilient Dockerfile with multiple mirrors and retry logic
FROM python:3.12-slim

# Set environment variables
ENV DEBIAN_FRONTEND=noninteractive
ENV PYTHONPATH=/app
ENV PYTHONUNBUFFERED=1
ENV PIP_TIMEOUT=300
ENV PIP_RETRIES=10
ENV PIP_DEFAULT_TIMEOUT=300

# Configure apt with multiple mirrors and extended timeouts
RUN echo 'Acquire::Retries "5";' > /etc/apt/apt.conf.d/99-retries && \
    echo 'Acquire::http::Timeout "300";' >> /etc/apt/apt.conf.d/99-retries && \
    echo 'Acquire::https::Timeout "300";' >> /etc/apt/apt.conf.d/99-retries && \
    echo 'APT::Get::Assume-Yes "true";' >> /etc/apt/apt.conf.d/99-retries && \
    echo 'APT::Install-Recommends "false";' >> /etc/apt/apt.conf.d/99-retries

# Add multiple Debian mirrors for better connectivity
RUN echo "deb http://deb.debian.org/debian bookworm main" > /etc/apt/sources.list && \
    echo "deb http://ftp.us.debian.org/debian bookworm main" >> /etc/apt/sources.list && \
    echo "deb http://ftp.debian.org/debian bookworm main" >> /etc/apt/sources.list && \
    echo "deb http://httpredir.debian.org/debian bookworm main" >> /etc/apt/sources.list && \
    echo "deb http://security.debian.org/debian-security bookworm-security main" >> /etc/apt/sources.list

# Install system dependencies with retry logic
RUN for i in 1 2 3 4 5; do \
        apt-get clean && \
        apt-get update --fix-missing && \
        apt-get install -y --fix-missing --no-install-recommends \
            poppler-utils \
            wget \
            curl \
            git \
            libgl1-mesa-glx \
            libglib2.0-0 \
            libgomp1 \
            build-essential \
            && break || sleep 30; \
    done && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Create app user
RUN groupadd -r appuser && useradd -r -g appuser appuser

# Create directories
RUN mkdir -p /app/doc /app/translated /app/temp /app/models && \
    chown -R appuser:appuser /app

WORKDIR /app

# Configure pip with multiple index URLs and extended timeouts
RUN pip config set global.timeout 300 && \
    pip config set global.retries 10 && \
    pip config set global.index-url https://pypi.org/simple/ && \
    pip config set global.extra-index-url "https://pypi.python.org/simple/ https://pypi.mirrors.ustc.edu.cn/simple/ https://mirrors.aliyun.com/pypi/simple/ https://pypi.douban.com/simple/"

# Copy requirements file
COPY requirements.txt .

# Install pip packages with enhanced retry and resume capabilities
RUN pip install --no-cache-dir --upgrade pip setuptools wheel

# Install packages in stages to handle large downloads better
# Stage 1: Core FastAPI and basic dependencies
RUN pip install --no-cache-dir --timeout 300 --retries 10 \
    fastapi>=0.100.0 \
    uvicorn[standard]>=0.20.0 \
    pydantic>=2.0.0 \
    pydantic-settings>=2.0.0 \
    python-multipart>=0.0.6 \
    requests==2.32.3 \
    aiofiles==24.1.0

# Stage 2: Azure and cloud dependencies
RUN pip install --no-cache-dir --timeout 300 --retries 10 \
    azure-storage-blob>=12.24.0 \
    azure-identity>=1.19.0 \
    websockets>=12.0 \
    python-dotenv>=1.1.0

# Stage 3: PDF and document processing (smaller packages first)
RUN pip install --no-cache-dir --timeout 300 --retries 10 \
    PyMuPDF==1.25.2 \
    pandas>=2.0.0 \
    "numpy<2.0.0" \
    protobuf

# Stage 4: Google AI dependencies
RUN pip install --no-cache-dir --timeout 300 --retries 10 \
    google-ai-generativelanguage>=0.6.0 \
    google-api-core>=2.24.0 \
    google-api-python-client>=2.169.0 \
    google-auth>=2.40.0 \
    google-auth-httplib2>=0.2.0 \
    google-generativeai>=0.8.0 \
    googleapis-common-protos>=1.70.0

# Stage 5: Computer Vision (largest packages - with special handling)
# Install OpenCV with resume capability and fallback options
RUN for i in 1 2 3 4 5; do \
        echo "Attempting to install OpenCV (attempt $i)..." && \
        pip install --no-cache-dir --timeout 600 --retries 15 \
            opencv-python==4.10.0.84 \
        && echo "OpenCV installed successfully" && break || \
        (echo "OpenCV attempt $i failed, trying alternative..." && \
         pip install --no-cache-dir --timeout 600 --retries 15 \
            opencv-python-headless==4.10.0.84 \
        && echo "OpenCV-headless installed successfully" && break) || \
        sleep 60; \
    done

# Install OpenCV contrib separately with retry
RUN for i in 1 2 3; do \
        echo "Attempting to install OpenCV-contrib (attempt $i)..." && \
        pip install --no-cache-dir --timeout 600 --retries 15 \
            opencv-contrib-python==4.10.0.84 \
        && echo "OpenCV-contrib installed successfully" && break || \
        echo "OpenCV-contrib attempt $i failed, continuing..." && sleep 60; \
    done || echo "Continuing without OpenCV-contrib"

# Stage 6: PIL/Pillow
RUN pip install --no-cache-dir --timeout 300 --retries 10 \
    pillow==11.0.0

# Stage 7: PyTorch (largest package - needs special handling)
RUN for i in 1 2 3; do \
        echo "Attempting to install PyTorch (attempt $i)..." && \
        pip install --no-cache-dir --timeout 900 --retries 20 \
            torch>=2.0.0 \
            torchvision>=0.15.0 \
        && echo "PyTorch installed successfully" && break || \
        (echo "PyTorch attempt $i failed, trying CPU-only version..." && \
         pip install --no-cache-dir --timeout 900 --retries 20 \
            torch torchvision --index-url https://download.pytorch.org/whl/cpu \
        && echo "PyTorch CPU installed successfully" && break) || \
        sleep 120; \
    done

# Stage 8: ML/AI frameworks
RUN pip install --no-cache-dir --timeout 600 --retries 15 \
    ultralytics>=8.3.0 \
    transformers>=4.47.0

# Stage 9: Paddle dependencies (large packages)
RUN for i in 1 2 3; do \
        echo "Attempting to install PaddlePaddle (attempt $i)..." && \
        pip install --no-cache-dir --timeout 900 --retries 20 \
            paddlepaddle>=3.0.0 \
        && echo "PaddlePaddle installed successfully" && break || \
        sleep 120; \
    done

RUN for i in 1 2 3; do \
        echo "Attempting to install PaddleOCR (attempt $i)..." && \
        pip install --no-cache-dir --timeout 600 --retries 15 \
            paddleocr>=2.9.0 \
        && echo "PaddleOCR installed successfully" && break || \
        sleep 90; \
    done

# Stage 10: spaCy and NLP
RUN pip install --no-cache-dir --timeout 300 --retries 10 \
    spacy>=3.8.0

# Download spaCy models with retry
RUN for i in 1 2 3; do \
        python -m spacy download en_core_web_sm && break || sleep 30; \
    done

# Stage 11: Remaining dependencies
RUN pip install --no-cache-dir --timeout 300 --retries 10 \
    imageio>=2.37.0 \
    scikit-image>=0.24.0 \
    psutil>=7.0.0 \
    py-cpuinfo>=9.0.0 \
    pyclipper>=1.3.0 \
    charset-normalizer>=3.4.0 \
    certifi>=2024.8.30 \
    urllib3>=2.2.3 \
    idna>=3.10 \
    Jinja2>=3.1.6 \
    MarkupSafe>=3.0.2 \
    annotated-types>=0.7.0 \
    typing-extensions>=4.12.2 \
    anyio>=4.6.2 \
    sniffio>=1.3.1 \
    starlette>=0.41.3

# Copy application code
COPY . .

# Create startup script
RUN echo '#!/bin/bash\n\
echo "🚀 Starting Translation API on Azure..."\n\
if [ ! -f "/app/models/yolov11x_best.pt" ]; then\n\
    echo "📥 Downloading YOLO model from Azure Storage..."\n\
    if [ -n "$AZURE_STORAGE_ACCOUNT_NAME" ]; then\n\
        wget -O /app/models/yolov11x_best.pt \\\n\
            "https://${AZURE_STORAGE_ACCOUNT_NAME}.blob.core.windows.net/models/yolov11x_best.pt" || \\\n\
        echo "⚠️  Could not download YOLO model, running without YOLO classification"\n\
    else\n\
        echo "⚠️  Azure Storage not configured, running without YOLO classification"\n\
    fi\n\
else\n\
    echo "✅ Using locally copied YOLO model"\n\
fi\n\
export TEMP_FOLDER="/app/temp"\n\
export DOC_FOLDER="/app/doc"\n\
export SAVE_DIR="/app/translated"\n\
export POPPLER_PATH="/usr/bin"\n\
export YOLO_MODEL_PATH="/app/models/yolov11x_best.pt"\n\
echo "🌐 Starting FastAPI server on port 8000..."\n\
uvicorn main:app --host 0.0.0.0 --port 8000' > /app/startup.sh && \
    chmod +x /app/startup.sh && \
    chown appuser:appuser /app/startup.sh

# Switch to non-root user
USER appuser

EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

CMD ["/app/startup.sh"]
