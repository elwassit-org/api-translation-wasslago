# Super resilient Azure deployment Dockerfile
FROM python:3.12-slim

# Set environment variables
ENV DEBIAN_FRONTEND=noninteractive
ENV APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=1
ENV PIP_TIMEOUT=1000
ENV PIP_RETRIES=5
ENV PIP_NO_CACHE_DIR=1

# Configure apt with multiple mirrors and extended timeouts
RUN echo 'Acquire::Retries "10";' > /etc/apt/apt.conf.d/99-retries && \
    echo 'Acquire::http::Timeout "120";' >> /etc/apt/apt.conf.d/99-retries && \
    echo 'Acquire::https::Timeout "120";' >> /etc/apt/apt.conf.d/99-retries && \
    echo 'Acquire::ftp::Timeout "120";' >> /etc/apt/apt.conf.d/99-retries && \
    echo 'APT::Get::Assume-Yes "true";' >> /etc/apt/apt.conf.d/99-retries && \
    echo 'APT::Install-Recommends "false";' >> /etc/apt/apt.conf.d/99-retries && \
    echo 'APT::Install-Suggests "false";' >> /etc/apt/apt.conf.d/99-retries

# Add alternative mirrors for better connectivity
RUN echo "deb http://archive.debian.org/debian/ bookworm main" > /etc/apt/sources.list && \
    echo "deb http://deb.debian.org/debian bookworm main" >> /etc/apt/sources.list && \
    echo "deb http://security.debian.org/debian-security bookworm-security main" >> /etc/apt/sources.list && \
    echo "deb http://httpredir.debian.org/debian bookworm main" >> /etc/apt/sources.list

# Install packages in multiple stages with extensive retry logic
RUN for attempt in 1 2 3 4 5 6 7 8 9 10; do \
        echo "=== Package installation attempt $attempt ===" && \
        apt-get clean && \
        apt-get update --fix-missing -o Acquire::CompressionTypes::Order::=gz && \
        if apt-get install -y --fix-missing --no-install-recommends \
            ca-certificates \
            wget \
            curl; then \
            echo "=== Basic packages installed successfully ===" && \
            break; \
        else \
            echo "=== Attempt $attempt failed, waiting before retry ===" && \
            sleep $(($attempt * 10)); \
        fi; \
        if [ $attempt -eq 10 ]; then \
            echo "=== All attempts failed ===" && \
            exit 1; \
        fi; \
    done

# Install poppler and media libraries
RUN for attempt in 1 2 3 4 5; do \
        echo "=== Media packages installation attempt $attempt ===" && \
        apt-get update --fix-missing && \
        if apt-get install -y --fix-missing --no-install-recommends \
            poppler-utils \
            libgl1-mesa-glx \
            libglib2.0-0 \
            libsm6 \
            libxext6 \
            libxrender-dev \
            libgomp1; then \
            echo "=== Media packages installed successfully ===" && \
            break; \
        else \
            echo "=== Media packages attempt $attempt failed ===" && \
            sleep $(($attempt * 15)); \
        fi; \
        if [ $attempt -eq 5 ]; then \
            echo "=== Media packages installation failed ===" && \
            exit 1; \
        fi; \
    done

# Install build tools
RUN for attempt in 1 2 3; do \
        echo "=== Build tools installation attempt $attempt ===" && \
        apt-get update --fix-missing && \
        if apt-get install -y --fix-missing --no-install-recommends \
            build-essential \
            gcc \
            g++; then \
            echo "=== Build tools installed successfully ===" && \
            break; \
        else \
            echo "=== Build tools attempt $attempt failed ===" && \
            sleep $(($attempt * 20)); \
        fi; \
        if [ $attempt -eq 3 ]; then \
            echo "=== Build tools installation failed, continuing without ===" && \
            break; \
        fi; \
    done

# Clean up
RUN apt-get clean && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* /var/cache/apt/archives/*

WORKDIR /app

# Copy requirements
COPY requirements-azure.txt .

# Configure pip with multiple index URLs for better connectivity
RUN pip config set global.timeout 1000 && \
    pip config set global.retries 10 && \
    pip config set global.index-url https://pypi.org/simple/ && \
    pip config set global.extra-index-url "https://pypi.python.org/simple/ https://pypi.mirrors.ustc.edu.cn/simple/"

# Install Python packages with extensive retry logic
RUN for attempt in 1 2 3 4 5; do \
        echo "=== Python packages installation attempt $attempt ===" && \
        if pip install --no-cache-dir --upgrade pip setuptools wheel; then \
            echo "=== Pip upgrade successful ===" && \
            break; \
        else \
            echo "=== Pip upgrade attempt $attempt failed ===" && \
            sleep $(($attempt * 10)); \
        fi; \
    done

RUN for attempt in 1 2 3 4 5; do \
        echo "=== Requirements installation attempt $attempt ===" && \
        if pip install --no-cache-dir --timeout 1000 --retries 10 -r requirements-azure.txt; then \
            echo "=== Requirements installed successfully ===" && \
            break; \
        else \
            echo "=== Requirements attempt $attempt failed ===" && \
            sleep $(($attempt * 15)); \
        fi; \
        if [ $attempt -eq 5 ]; then \
            echo "=== Requirements installation failed ===" && \
            exit 1; \
        fi; \
    done

# Create app user
RUN groupadd -r appuser && useradd -r -g appuser appuser

# Create directories
RUN mkdir -p /app/temp /app/doc /app/translated /app/models /app/scripts && \
    chown -R appuser:appuser /app

# Copy application code
COPY . .

# Set up startup script
COPY scripts/startup.sh /app/startup.sh
RUN chmod +x /app/startup.sh && \
    chown appuser:appuser /app/startup.sh

# Environment variables
ENV PYTHONPATH=/app
ENV POPPLER_PATH=/usr/bin
ENV TEMP_FOLDER=/app/temp
ENV DOC_FOLDER=/app/doc
ENV SAVE_DIR=/app/translated
ENV YOLO_MODEL_PATH=/app/models/yolov11x_best.pt

# Switch to non-root user
USER appuser

EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

CMD ["/app/startup.sh"]
