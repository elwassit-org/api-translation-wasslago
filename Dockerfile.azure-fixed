# Azure-optimized Dockerfile with Python 3.12 compatibility
FROM python:3.12-slim

# Set environment variables
ENV DEBIAN_FRONTEND=noninteractive
ENV PYTHONPATH=/app
ENV PYTHONUNBUFFERED=1
ENV PIP_NO_CACHE_DIR=1
ENV PIP_DISABLE_PIP_VERSION_CHECK=1

# Install system dependencies
RUN apt-get update && apt-get install -y \
    poppler-utils \
    wget \
    curl \
    git \
    build-essential \
    pkg-config \
    libgl1-mesa-glx \
    libglib2.0-0 \
    libgomp1 \
    && rm -rf /var/lib/apt/lists/*

# Create app directory
WORKDIR /app

# Create required directories
RUN mkdir -p /app/temp /app/doc /app/translated /app/models

# Upgrade pip and install build tools first
RUN pip install --upgrade pip setuptools wheel

# Copy requirements and install in stages to avoid build issues
COPY requirements-azure-fixed.txt ./requirements.txt

# Install packages in stages to handle compatibility issues
# Stage 1: Core FastAPI dependencies
RUN pip install --no-cache-dir \
    fastapi>=0.100.0 \
    uvicorn[standard]>=0.20.0 \
    pydantic>=2.0.0 \
    pydantic-settings>=2.0.0 \
    python-multipart>=0.0.6 \
    aiofiles>=23.0.0 \
    requests>=2.31.0 \
    python-dotenv>=1.0.0

# Stage 2: Azure dependencies
RUN pip install --no-cache-dir \
    azure-storage-blob>=12.19.0 \
    azure-identity>=1.15.0 \
    azure-keyvault-secrets>=4.7.0

# Stage 3: PDF processing dependencies
RUN pip install --no-cache-dir \
    PyMuPDF>=1.23.0 \
    pdfplumber>=0.10.0

# Stage 4: Computer vision (use compatible versions)
RUN pip install --no-cache-dir \
    opencv-python-headless>=4.8.0 \
    Pillow>=10.0.0 \
    "numpy>=1.24.0,<2.0.0"

# Stage 5: Google AI dependencies
RUN pip install --no-cache-dir \
    google-generativeai>=0.3.0 \
    google-cloud-translate>=3.12.0

# Stage 6: ML/AI frameworks (if needed)
RUN pip install --no-cache-dir \
    ultralytics>=8.0.0 || echo "Skipping ultralytics - optional dependency"

# Copy application code
COPY . .

# Create startup script
RUN echo '#!/bin/bash\n\
echo "🚀 Starting Wasslago Translation API..."\n\
\n\
# Download YOLO model if not present and Azure Storage is configured\n\
if [ ! -f "/app/models/yolov11x_best.pt" ] && [ -n "$AZURE_STORAGE_ACCOUNT_NAME" ]; then\n\
    echo "📥 Downloading YOLO model from Azure Storage..."\n\
    wget -O /app/models/yolov11x_best.pt \\\n\
        "https://${AZURE_STORAGE_ACCOUNT_NAME}.blob.core.windows.net/models/yolov11x_best.pt" || \\\n\
    echo "⚠️  Could not download YOLO model - running without YOLO features"\n\
elif [ -f "/app/models/yolov11x_best.pt" ]; then\n\
    echo "✅ Using existing YOLO model"\n\
else\n\
    echo "⚠️  No YOLO model found - running without YOLO features"\n\
fi\n\
\n\
# Set environment variables for the application\n\
export TEMP_FOLDER="/app/temp"\n\
export DOC_FOLDER="/app/doc"\n\
export SAVE_DIR="/app/translated"\n\
export POPPLER_PATH="/usr/bin"\n\
export YOLO_MODEL_PATH="/app/models/yolov11x_best.pt"\n\
\n\
echo "🌐 Starting FastAPI server on port 8000..."\n\
uvicorn main:app --host 0.0.0.0 --port 8000 --workers 1' > /app/startup.sh && \
    chmod +x /app/startup.sh

# Create health check script
RUN echo '#!/bin/bash\ncurl -f http://localhost:8000/health || exit 1' > /app/healthcheck.sh && \
    chmod +x /app/healthcheck.sh

EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD /app/healthcheck.sh

# Use startup script
CMD ["/app/startup.sh"]
